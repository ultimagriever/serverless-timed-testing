AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs8.10
    MemorySize: 1024
    Timeout: 300
  Api:
    Cors:
      AllowHeaders: "'*'"
      AllowMethods: "'*'"
      AllowOrigin: "'*'"
      MaxAge: "'86400'"

Parameters:
  OpenIDConnectProviderArn:
    Type: String
    Description: OpenID Connect Provider ARN for Student Identity Pool
    AllowedPattern: '^arn:aws:iam::\d+:oidc-provider/.*$'

Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: LogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                Resource: "*"
        - PolicyName: TextMessagePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:SetSMSAttributes
                Resource: "*"

  AdministratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRoleWithWebIdentity
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
      Policies:
        - PolicyName: AdministratorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:execute-api:"
                      - !Ref AWS::Region
                      - ":"
                      - !Ref AWS::AccountId
                      - ":"
                      - !Ref RestApi
                      - "/v1/*/*"

  StudentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRoleWithWebIdentity
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
      Policies:
        - PolicyName: StudentPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:execute-api:"
                      - !Ref AWS::Region
                      - ":"
                      - !Ref AWS::AccountId
                      - ":"
                      - !Ref RestApi
                      - "/v1/GET/tests/*"
                  - !Join
                    - ""
                    - - "arn:aws:execute-api:"
                      - !Ref AWS::Region
                      - ":"
                      - !Ref AWS::AccountId
                      - ":"
                      - !Ref RestApi
                      - "/v1/POST/tests/*/conclude"

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRoleWithWebIdentity
            Principal:
              Federated:
                - cognito-identity.amazonaws.com

  AdminUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 9
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      UserPoolName: ServerlessTimedTestsAdminUsers

  AdminUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ServerlessTimedTestsAdminClient
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      UserPoolId: !Ref AdminUserPool

  AdminIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ServerlessTimedTestsAdminIDP
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref AdminUserPoolClient
          ProviderName: !GetAtt AdminUserPool.ProviderName
          ServerSideTokenCheck: true

  AdminRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref AdminIdentityPool
      Roles:
        authenticated: !GetAtt AdministratorRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  StudentIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ServerlessTimedTestsStudentIDP
      AllowUnauthenticatedIdentities: false
      OpenIdConnectProviderARNs:
        - !Ref OpenIDConnectProviderArn

  StudentRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref StudentIdentityPool
      Roles:
        authenticated: !GetAtt StudentRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

  WebsiteOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: WebsiteBucket

  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: !Select
              - 1
              - !Split
                - "//"
                - !GetAtt WebsiteBucket.WebsiteURL
            Id: WebsiteOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        PriceClass: PriceClass_All
        DefaultCacheBehavior:
          TargetOriginId: WebsiteOrigin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all

  CreateStudent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: auth.createUser
      Role: !GetAtt ExecutionRole.Arn
      Events:
        CreateStudentPost:
          Type: Api
          Properties:
            Method: post
            Path: /students
            RestApiId: !Ref RestApi

  RequestOTP:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: auth.generateCode
      Role: !GetAtt ExecutionRole.Arn
      Events:
        RequestOTP:
          Type: Api
          Properties:
            Method: post
            Path: /students/request-otp
            RestApiId: !Ref RestApi

  AuthenticateStudent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: auth.authenticate
      Role: !GetAtt ExecutionRole.Arn
      Events:
        Authenticate:
          Type: Api
          Properties:
            Method: post
            Path: /students/authenticate
            RestApiId: !Ref RestApi

  GetTests:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: tests.get
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TestsTable
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Method: get
            Path: /tests
        GetById:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Method: get
            Path: /tests/{id}

  CreateTest:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: tests.create
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TestsTable
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Method: post
            Path: /tests

  UpdateTest:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: tests.update
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TestsTable
      Events:
        Put:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Method: put
            Path: /tests/{id}

  DeleteTest:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: tests.delete
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TestsTable
          DYNAMODB_DOMAIN_TABLE: !Ref DomainsTable
          DYNAMODB_QUESTION_TABLE: !Ref QuestionsTable
      Events:
        Delete:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Method: delete
            Path: /tests/{id}

  GetDomains:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: domains.get
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DomainsTable
      Events:
        GetAllDomains:
          Type: Api
          Properties:
            Method: get
            Path: /tests/{id}/domains
            RestApiId: !Ref RestApi
        GetDomainById:
          Type: Api
          Properties:
            Method: get
            Path: /tests/{id}/domains/{domainId}
            RestApiId: !Ref RestApi

  CreateDomain:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: domains.create
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DomainsTable
      Events:
        CreateDomain:
          Type: Api
          Properties:
            Method: post
            Path: /tests/{id}/domains
            RestApiId: !Ref RestApi

  UpdateDomain:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: domains.update
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DomainsTable
      Events:
        UpdateDomain:
          Type: Api
          Properties:
            Method: put
            Path: /tests/{id}/domains/{domainId}
            RestApiId: !Ref RestApi

  DeleteDomain:
    Type: AWS::Serverless::Function
    Properties:
      Handler: domains.delete
      CodeUri: ./functions
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DomainsTable
      Events:
        DeleteDomain:
          Type: Api
          Properties:
            Method: delete
            Path: /tests/{id}/domains/{domainId}
            RestApiId: !Ref RestApi

  GetQuestions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: questions.get
      CodeUri: ./functions
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref QuestionsTable
      Events:
        GetQuestions:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Method: get
            Path: /tests/{id}/questions
        GetQuestionById:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Method: get
            Path: /tests/{id}/questions/{questionId}

  CreateQuestion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: questions.create
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref QuestionsTable
          DYNAMODB_DOMAIN_TABLE: !Ref DomainsTable
      Events:
        CreateDomain:
          Type: Api
          Properties:
            Method: post
            Path: /tests/{id}/questions
            RestApiId: !Ref RestApi

  UpdateQuestion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions
      Handler: questions.update
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref QuestionsTable
          DYNAMODB_DOMAIN_TABLE: !Ref DomainsTable
      Events:
        UpdateDomain:
          Type: Api
          Properties:
            Method: put
            Path: /tests/{id}/questions/{questionId}
            RestApiId: !Ref RestApi

  DeleteQuestion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: questions.delete
      CodeUri: ./functions
      Role: !GetAtt ExecutionRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref QuestionsTable
      Events:
        DeleteDomain:
          Type: Api
          Properties:
            Method: delete
            Path: /tests/{id}/questions/{questionId}
            RestApiId: !Ref RestApi

  TestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: ownerId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: ownerId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: owner-index
          KeySchema:
            - AttributeName: ownerId
              KeyType: HASH
            - AttributeName: id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1

  DomainsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: testId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: testId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: test-index
          KeySchema:
            - AttributeName: testId
              KeyType: HASH
            - AttributeName: id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1

  QuestionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: testId
          AttributeType: S
        - AttributeName: domainId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: testId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: test-domain-index
          KeySchema:
            - AttributeName: testId
              KeyType: HASH
            - AttributeName: domainId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0.0"
          title: "Serverless Timed Tests"
        basePath: "/v1"
        tags:
          - name: Tests
            description: Test-related endpoints
          - name: Questions
            description: Question-related endpoints
          - name: Attempts
            description: Attempt-related endpoints
          - name: Students
            description: Student-related endpoints
          - name: Domains
            description: Domain-related endpoints
        paths:
          /tests:
            get:
              summary: Fetches list of tests
              description: Gets all tests created to date
              tags:
                - Tests
              responses:
                "200":
                  description: OK
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTests.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
            post:
              summary: Creates a new test
              description: Creates a new test under the authenticated user
              tags:
                - Tests
              responses:
                "201":
                  description: Created
                "500":
                  description: Internal Server Error
              parameters:
                - in: body
                  name: test
                  description: The test to create
                  schema:
                    $ref: "#/definitions/Test"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTest.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
          /tests/{id}:
            get:
              summary: Fetches individual test
              description: Fetches test in DynamoDB table by its GUID
              tags:
                - Tests
              responses:
                "200":
                  description: OK
                "404":
                  description: Not Found
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTests.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
            put:
              summary: Updates existing test
              description: Updates an existing test if the owner is the one performing the update
              tags:
                - Tests
              responses:
                "200":
                  description: OK
                "401":
                  description: Unauthorized
                "500":
                  description: Internal Server Error
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTest.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
              parameters:
                - in: path
                  name: id
                  description: The test's GUID
                  type: string
                  required: true
                - in: body
                  name: test
                  description: The updated test information
                  schema:
                    $ref: "#/definitions/Test"
            delete:
              summary: Deletes a specific test
              description: Deletes an existing test if the owner is the one performing the deletion
              tags:
                - Tests
              responses:
                "200":
                  description: OK
                "500":
                  description: Internal Server Error
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTest.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
              parameters:
                - in: path
                  name: id
                  description: The test's GUID
                  type: string
                  required: true
          /tests/{id}/domains:
            get:
              summary: Fetches list of domains from test
              description: Gets all knowledge domains pertaining to the test
              tags:
                - Tests
                - Domains
              responses:
                "200":
                  description: OK
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  required: true
                  type: string
                  description: The test's GUID
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDomains.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
            post:
              summary: Create a new domain for a test
              description: Creates a new knowledge domain for an individual test
              tags:
                - Tests
                - Domains
              responses:
                "201":
                  description: Created
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  required: true
                  type: string
                  description: The test's GUID
                - in: body
                  name: domain
                  schema:
                    $ref: "#/definitions/Domain"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateDomain.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
          /tests/{id}/domains/{domainId}:
            get:
              summary: Gets a domain by its ID
              description: Gets a domain by its ID, given that the test ID is correct
              tags:
                - Tests
                - Domains
              responses:
                "200":
                  description: OK
                "404":
                  description: Domain not found
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  required: true
                  type: string
                  description: The test's GUID
                - in: path
                  name: domainId
                  required: true
                  type: string
                  description: The domain's GUID
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDomains.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
            put:
              summary: Updates an existing domain by its ID
              description: Updates an existing domain by its ID, given the correct test ID
              tags:
                - Tests
                - Domains
              responses:
                "200":
                  description: OK
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  required: true
                  type: string
                  description: The test's GUID
                - in: path
                  name: domainId
                  required: true
                  type: string
                  description: The domain's GUID
                - in: body
                  name: domain
                  schema:
                    $ref: "#/definitions/Domain"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateDomain.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
            delete:
              summary: Deletes a domain given its ID and test ID
              description: Deletes an existing domain by its ID, given the correct test ID
              tags:
                - Tests
                - Domains
              responses:
                "204":
                  description: No Content
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  required: true
                  type: string
                  description: The test's GUID
                - in: path
                  name: domainId
                  required: true
                  type: string
                  description: The domain's GUID
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteDomain.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
          /tests/{id}/questions:
            get:
              summary: Gets the test's questions
              description: Fetches the test's questions with domain, stem, answers and distractors
              tags:
                - Tests
                - Questions
              responses:
                "200":
                  description: OK
                "404":
                  description: Not Found
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  description: The test's GUID
                  type: string
                  required: true
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetQuestions.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
            post:
              summary: Creates a new multiple-choice question
              description: Fetches a question, its choices for an answer and the correct alternatives
              tags:
                - Tests
                - Questions
              responses:
                "201":
                  description: Created
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  description: The test's GUID
                  type: string
                  required: true
                - in: body
                  name: question
                  schema:
                    $ref: "#/definitions/Question"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateQuestion.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
          /tests/{id}/questions/{questionId}:
            get:
              summary: Gets the test's questions
              description: Fetches the test's questions with domain, stem, answers and distractors
              tags:
                - Tests
                - Questions
              responses:
                "200":
                  description: OK
                "404":
                  description: Not Found
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  description: The test's GUID
                  type: string
                  required: true
                - in: path
                  name: questionId
                  description: The question's GUID
                  type: string
                  required: true
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetQuestions.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
            put:
              summary: Updates a question
              description: Updates a question, its answers, knowledge domain and/or correct alternatives
              tags:
                - Tests
                - Questions
              responses:
                "200":
                  description: OK
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  description: The test's GUID
                  type: string
                  required: true
                - in: path
                  name: questionId
                  description: The question's GUID
                  type: string
                  required: true
                - in: body
                  name: question
                  schema:
                    $ref: "#/definitions/Question"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateQuestion.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
            delete:
              summary: Deletes a question
              description: Deletes a question from a test
              tags:
                - Tests
                - Questions
              responses:
                "204":
                  description: No Content
                "500":
                  description: Internal Server Error
              parameters:
                - in: path
                  name: id
                  description: The test's GUID
                  type: string
                  required: true
                - in: path
                  name: questionId
                  description: The question's GUID
                  type: string
                  required: true
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteQuestion.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
          /students:
            post:
              summary: Create a student to undertake created tests
              description: Creates new student in Firebase Auth
              tags:
                - Students
              responses:
                "201":
                  description: Created
                "422":
                  description: Unprocessable Entity
                "500":
                  description: Internal Server Error
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateStudent.Arn}/invocations
              x-amazon-apigateway-auth:
                type: aws_iam
          /students/request-otp:
            post:
              summary: Request new one-time password
              description: Requests a new one-time password if the user exists in the base
              tags:
                - Students
              responses:
                "200":
                  description: OK
                "422":
                  description: Unprocessable Entity
                "500":
                  description: Internal Server Error
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RequestOTP.Arn}/invocations
          /students/authenticate:
            post:
              summary: Authenticate OTP against phone
              description: Check if code issued for phone is valid
              tags:
                - Students
              responses:
                "200":
                  description: OK
                "401":
                  description: Unauthorized
                "422":
                  description: Unprocessable Entity
                "500":
                  description: Internal Server Error
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthenticateStudent.Arn}/invocations
        definitions:
          Test:
            type: object
            required:
              - title
              - timeLimit
            properties:
              title:
                type: string
              timeLimit:
                type: string
              description:
                type: string
          Domain:
            type: object
            required:
              - title
            properties:
              title:
                type: string
              description:
                type: string
          Question:
            type: object
            required:
              - domainId
              - stem
              - answers
              - correctAnswers
            properties:
              domainId:
                type: string
              stem:
                type: string
              answers:
                type: string
              correctAnswers:
                type: string

Outputs:
  AdminClientId:
    Description: Admin user pool client ID
    Value: !Ref AdminUserPoolClient
  AdminUserPoolId:
    Description: Admin user pool ID
    Value: !Ref AdminUserPool
  AdminIdentityPoolId:
    Description: Admin identity pool ID
    Value: !Ref AdminIdentityPool
  StudentIdentityPoolId:
    Description: Student identity pool ID
    Value: !Ref StudentIdentityPool
  ApiEndpoint:
    Description: API Gateway endpoint
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/v1
